name: CI & CD Workflow

on:
  push:
    branches:
      - develop
      - main
      - feature/**
      - bugfix/**
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      deployTest: ${{ steps.setup.outputs.DEPLOY_TEST }}
      deployProduction: ${{ steps.setup.outputs.DEPLOY_PRODUCTION }}
      version: ${{ steps.package.outputs.VERSION }}
      fullBuildNumber: ${{ steps.summary.outputs.FULL_BUILD_NUMBER }}
    steps:
      - name: Evaluate Deployment Strategy
        id: setup
        run: |
          echo "DEPLOY_TEST=${{ startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/bugfix/') }}" >> "$GITHUB_OUTPUT"
          echo "DEPLOY_PRODUCTION=${{ github.ref == 'refs/heads/main' }}" >> "$GITHUB_OUTPUT"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Version from package.json
        id: package
        shell: pwsh
        run: |
          $version = (Get-Content ./package.json) -join "`n" | ConvertFrom-Json | Select -ExpandProperty "version"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT

      - name: Summary
        id: summary
        run: |
          if [ ${{ steps.setup.outputs.DEPLOY_PRODUCTION }} == 'false' ]; then
            echo "Deployment: nur bis Test" >> $GITHUB_STEP_SUMMARY
          else
            echo "Deployment: bis in Production mÃ¶glich" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Version: ${{ steps.package.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "Run Id: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "Run Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "Run Attempt: ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY

          echo "FULL_BUILD_NUMBER=v${{ steps.package.outputs.VERSION }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}" >> "$GITHUB_OUTPUT"

  # Build

  builds:
    name: "Build Landing Page & Main Page"
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: "[npm] Install Dependencies"
        run: npm ci

      - name: Replace Placeholders in HTML (Landing)
        shell: pwsh
        run: |
          (Get-Content ./src/landing/index.html).Replace('<!-- VERSION-PLACEHOLDER -->', '${{ needs.prepare.outputs.fullBuildNumber }}') | Set-Content ./src/landing/index.html
          (Get-Content ./src/landing/index.html).Replace('<!-- HEAD-PLACEHOLDER -->', '<meta name="robots" content="noindex,nofollow">') | Set-Content ./src/landing/index.html

      - name: Replace Placeholders in HTML
        shell: pwsh
        run: |
          (Get-Content ./src/index.html).Replace('<!-- VERSION-PLACEHOLDER -->', '${{ needs.prepare.outputs.fullBuildNumber }}') | Set-Content ./src/index.html
          (Get-Content ./src/index.html).Replace('<!-- HEAD-PLACEHOLDER -->', '<meta name="robots" content="noindex,nofollow">') | Set-Content ./src/index.html

      - name: "[npm] Build"
        run: npm run ci:build:landing --if-present

      - name: "[npm] Build"
        run: npm run ci:build --if-present

      - name: "[publish] Landing Page"
        uses: actions/upload-artifact@v4
        with:
          name: Landing
          path: ./dist/landing/

      - name: "[publish] Main Page"
        uses: actions/upload-artifact@v4
        with:
          name: Main
          path: ./dist/main/

  deploy-test:
    name: "[Test] Deploy Landing Page"
    needs: builds
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - name: Download Artifact form Build
        uses: actions/download-artifact@v4
        with:
          name: Main
          path: ./dist/

      - name: Deploy with FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_DEPLOY_HOSTNAME }}
          username: ${{ secrets.FTP_DEPLOY_USERNAME }}
          password: ${{ secrets.FTP_DEPLOY_PASSWORD }}
          server-dir: ./projects/test/
          local-dir: ./dist/
          dangerous-clean-slate: true

  deploy-landing-test:
    name: "[Test] Deploy Main Page"
    needs: builds
    runs-on: ubuntu-latest
    environment: Landing Test
    steps:
      - name: Download Artifact form Build
        uses: actions/download-artifact@v4
        with:
          name: Landing
          path: ./dist/

      - name: Deploy with FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_DEPLOY_HOSTNAME }}
          username: ${{ secrets.FTP_DEPLOY_USERNAME }}
          password: ${{ secrets.FTP_DEPLOY_PASSWORD }}
          server-dir: ./projects/test/
          local-dir: ./dist/
          dangerous-clean-slate: true

  deploy-production:
    name: "[Production] Deploy"
    needs: deploy-test
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Download Artifact form Build
        uses: actions/download-artifact@v4
        with:
          name: Main
          path: ./dist/

      - name: Replace Placeholders in HTML
        shell: pwsh
        run: |
          (Get-Content ./dist/index.html).Replace('<meta name="robots" content="noindex,nofollow">', '') | Set-Content ./dist/index.html

      - name: Deploy with FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_DEPLOY_HOSTNAME }}
          username: ${{ secrets.FTP_DEPLOY_USERNAME }}
          password: ${{ secrets.FTP_DEPLOY_PASSWORD }}
          server-dir: ./projects/volksschule-neubau/
          local-dir: ./dist/
          dangerous-clean-slate: true
